use cairo_lib::data_structures::eth_mpt::{MPTNode, MPTTrait};
use array::{ArrayTrait, SpanTrait};
use result::ResultTrait;

use debug::PrintTrait;
use starknet::SyscallResultTrait;
use traits::TryInto;
use option::OptionTrait;

#[test]
#[available_gas(9999999999)]
fn test_decode_rlp_node_branch() {
    let mut rlp_node  = ArrayTrait::new();
    rlp_node.append(0xf9);
    rlp_node.append(0x02);
    rlp_node.append(0x11);
    rlp_node.append(0xa0);
    rlp_node.append(0x77);
    rlp_node.append(0x70);
    rlp_node.append(0xcf);
    rlp_node.append(0x09);
    rlp_node.append(0xb5);
    rlp_node.append(0x06);
    rlp_node.append(0x7a);
    rlp_node.append(0x1b);
    rlp_node.append(0x35);
    rlp_node.append(0xdf);
    rlp_node.append(0x62);
    rlp_node.append(0xa9);
    rlp_node.append(0x24);
    rlp_node.append(0x89);
    rlp_node.append(0x81);
    rlp_node.append(0x75);
    rlp_node.append(0xce);
    rlp_node.append(0xae);
    rlp_node.append(0xec);
    rlp_node.append(0xad);
    rlp_node.append(0x1f);
    rlp_node.append(0x68);
    rlp_node.append(0xcd);
    rlp_node.append(0xb4);
    rlp_node.append(0xa8);
    rlp_node.append(0x44);
    rlp_node.append(0x40);
    rlp_node.append(0x0c);
    rlp_node.append(0x73);
    rlp_node.append(0xc1);
    rlp_node.append(0x4a);
    rlp_node.append(0xf4);
    rlp_node.append(0xa0);
    rlp_node.append(0x1e);
    rlp_node.append(0xa3);
    rlp_node.append(0x85);
    rlp_node.append(0xd0);
    rlp_node.append(0x5a);
    rlp_node.append(0xb2);
    rlp_node.append(0x61);
    rlp_node.append(0x46);
    rlp_node.append(0x6d);
    rlp_node.append(0x5c);
    rlp_node.append(0x04);
    rlp_node.append(0x87);
    rlp_node.append(0xfe);
    rlp_node.append(0x68);
    rlp_node.append(0x45);
    rlp_node.append(0x34);
    rlp_node.append(0xc1);
    rlp_node.append(0x9f);
    rlp_node.append(0x1a);
    rlp_node.append(0x4b);
    rlp_node.append(0x5c);
    rlp_node.append(0x4b);
    rlp_node.append(0x18);
    rlp_node.append(0xdc);
    rlp_node.append(0x1a);
    rlp_node.append(0x36);
    rlp_node.append(0x35);
    rlp_node.append(0x60);
    rlp_node.append(0x02);
    rlp_node.append(0x50);
    rlp_node.append(0x71);
    rlp_node.append(0xb4);
    rlp_node.append(0xa0);
    rlp_node.append(0x2c);
    rlp_node.append(0x4c);
    rlp_node.append(0x04);
    rlp_node.append(0xce);
    rlp_node.append(0x35);
    rlp_node.append(0x40);
    rlp_node.append(0xd3);
    rlp_node.append(0xd1);
    rlp_node.append(0x46);
    rlp_node.append(0x18);
    rlp_node.append(0x72);
    rlp_node.append(0x30);
    rlp_node.append(0x3c);
    rlp_node.append(0x53);
    rlp_node.append(0xa5);
    rlp_node.append(0xe5);
    rlp_node.append(0x66);
    rlp_node.append(0x83);
    rlp_node.append(0xc1);
    rlp_node.append(0x30);
    rlp_node.append(0x4f);
    rlp_node.append(0x8d);
    rlp_node.append(0x36);
    rlp_node.append(0xa8);
    rlp_node.append(0x80);
    rlp_node.append(0x0c);
    rlp_node.append(0x6a);
    rlp_node.append(0xf5);
    rlp_node.append(0xfa);
    rlp_node.append(0x3f);
    rlp_node.append(0xcd);
    rlp_node.append(0xee);
    rlp_node.append(0xa0);
    rlp_node.append(0xa9);
    rlp_node.append(0xdc);
    rlp_node.append(0x77);
    rlp_node.append(0x8d);
    rlp_node.append(0xc5);
    rlp_node.append(0x4b);
    rlp_node.append(0x7d);
    rlp_node.append(0xd3);
    rlp_node.append(0xc4);
    rlp_node.append(0x82);
    rlp_node.append(0x22);
    rlp_node.append(0xe7);
    rlp_node.append(0x39);
    rlp_node.append(0xd1);
    rlp_node.append(0x61);
    rlp_node.append(0xfe);
    rlp_node.append(0xb0);
    rlp_node.append(0xc0);
    rlp_node.append(0xee);
    rlp_node.append(0xce);
    rlp_node.append(0xb2);
    rlp_node.append(0xdc);
    rlp_node.append(0xd5);
    rlp_node.append(0x17);
    rlp_node.append(0x37);
    rlp_node.append(0xf0);
    rlp_node.append(0x5b);
    rlp_node.append(0x8e);
    rlp_node.append(0x37);
    rlp_node.append(0xa6);
    rlp_node.append(0x38);
    rlp_node.append(0x51);
    rlp_node.append(0xa0);
    rlp_node.append(0xa9);
    rlp_node.append(0x5f);
    rlp_node.append(0x4d);
    rlp_node.append(0x55);
    rlp_node.append(0x56);
    rlp_node.append(0xdf);
    rlp_node.append(0x62);
    rlp_node.append(0xdd);
    rlp_node.append(0xc2);
    rlp_node.append(0x62);
    rlp_node.append(0x99);
    rlp_node.append(0x04);
    rlp_node.append(0x97);
    rlp_node.append(0xae);
    rlp_node.append(0x56);
    rlp_node.append(0x9b);
    rlp_node.append(0xcd);
    rlp_node.append(0x8e);
    rlp_node.append(0xfd);
    rlp_node.append(0xda);
    rlp_node.append(0x7b);
    rlp_node.append(0x20);
    rlp_node.append(0x07);
    rlp_node.append(0x93);
    rlp_node.append(0xf8);
    rlp_node.append(0xd3);
    rlp_node.append(0xde);
    rlp_node.append(0x4c);
    rlp_node.append(0xdb);
    rlp_node.append(0x97);
    rlp_node.append(0x18);
    rlp_node.append(0xd7);
    rlp_node.append(0xa0);
    rlp_node.append(0x39);
    rlp_node.append(0xd4);
    rlp_node.append(0x06);
    rlp_node.append(0x6d);
    rlp_node.append(0x14);
    rlp_node.append(0x38);
    rlp_node.append(0x22);
    rlp_node.append(0x6e);
    rlp_node.append(0xaf);
    rlp_node.append(0x4a);
    rlp_node.append(0xc9);
    rlp_node.append(0xe9);
    rlp_node.append(0x43);
    rlp_node.append(0xa8);
    rlp_node.append(0x74);
    rlp_node.append(0xa9);
    rlp_node.append(0xa9);
    rlp_node.append(0xc2);
    rlp_node.append(0x5f);
    rlp_node.append(0xb0);
    rlp_node.append(0xd8);
    rlp_node.append(0x1d);
    rlp_node.append(0xb9);
    rlp_node.append(0x86);
    rlp_node.append(0x1d);
    rlp_node.append(0x8c);
    rlp_node.append(0x13);
    rlp_node.append(0x36);
    rlp_node.append(0xb3);
    rlp_node.append(0xe2);
    rlp_node.append(0x03);
    rlp_node.append(0x4c);
    rlp_node.append(0xa0);
    rlp_node.append(0x7a);
    rlp_node.append(0xcc);
    rlp_node.append(0x7c);
    rlp_node.append(0x63);
    rlp_node.append(0xb4);
    rlp_node.append(0x6a);
    rlp_node.append(0xa4);
    rlp_node.append(0x18);
    rlp_node.append(0xb3);
    rlp_node.append(0xc9);
    rlp_node.append(0xa0);
    rlp_node.append(0x41);
    rlp_node.append(0xa1);
    rlp_node.append(0x25);
    rlp_node.append(0x6b);
    rlp_node.append(0xcb);
    rlp_node.append(0x73);
    rlp_node.append(0x61);
    rlp_node.append(0x31);
    rlp_node.append(0x6b);
    rlp_node.append(0x39);
    rlp_node.append(0x7a);
    rlp_node.append(0xda);
    rlp_node.append(0x5a);
    rlp_node.append(0x88);
    rlp_node.append(0x67);
    rlp_node.append(0x49);
    rlp_node.append(0x1b);
    rlp_node.append(0xbb);
    rlp_node.append(0x13);
    rlp_node.append(0x01);
    rlp_node.append(0x30);
    rlp_node.append(0xa0);
    rlp_node.append(0x15);
    rlp_node.append(0x35);
    rlp_node.append(0x8a);
    rlp_node.append(0x81);
    rlp_node.append(0x25);
    rlp_node.append(0x2e);
    rlp_node.append(0xc4);
    rlp_node.append(0x93);
    rlp_node.append(0x71);
    rlp_node.append(0x13);
    rlp_node.append(0xfe);
    rlp_node.append(0x36);
    rlp_node.append(0xc7);
    rlp_node.append(0x80);
    rlp_node.append(0x46);
    rlp_node.append(0xb7);
    rlp_node.append(0x11);
    rlp_node.append(0xfb);
    rlp_node.append(0xa1);
    rlp_node.append(0x97);
    rlp_node.append(0x34);
    rlp_node.append(0x91);
    rlp_node.append(0xbb);
    rlp_node.append(0x29);
    rlp_node.append(0x18);
    rlp_node.append(0x7a);
    rlp_node.append(0x00);
    rlp_node.append(0x78);
    rlp_node.append(0x5f);
    rlp_node.append(0xf8);
    rlp_node.append(0x52);
    rlp_node.append(0xae);
    rlp_node.append(0xa0);
    rlp_node.append(0x68);
    rlp_node.append(0x91);
    rlp_node.append(0x42);
    rlp_node.append(0xd3);
    rlp_node.append(0x16);
    rlp_node.append(0xab);
    rlp_node.append(0xfa);
    rlp_node.append(0xa7);
    rlp_node.append(0x1c);
    rlp_node.append(0x8b);
    rlp_node.append(0xce);
    rlp_node.append(0xdf);
    rlp_node.append(0x49);
    rlp_node.append(0x20);
    rlp_node.append(0x1d);
    rlp_node.append(0xdb);
    rlp_node.append(0xb2);
    rlp_node.append(0x10);
    rlp_node.append(0x4e);
    rlp_node.append(0x25);
    rlp_node.append(0x0a);
    rlp_node.append(0xdc);
    rlp_node.append(0x90);
    rlp_node.append(0xc4);
    rlp_node.append(0xe8);
    rlp_node.append(0x56);
    rlp_node.append(0x22);
    rlp_node.append(0x1f);
    rlp_node.append(0x53);
    rlp_node.append(0x4a);
    rlp_node.append(0x96);
    rlp_node.append(0x58);
    rlp_node.append(0xa0);
    rlp_node.append(0xdc);
    rlp_node.append(0x36);
    rlp_node.append(0x50);
    rlp_node.append(0x99);
    rlp_node.append(0x25);
    rlp_node.append(0x34);
    rlp_node.append(0xfd);
    rlp_node.append(0xa8);
    rlp_node.append(0xa3);
    rlp_node.append(0x14);
    rlp_node.append(0xa7);
    rlp_node.append(0xdb);
    rlp_node.append(0xb0);
    rlp_node.append(0xae);
    rlp_node.append(0x3b);
    rlp_node.append(0xa8);
    rlp_node.append(0xc7);
    rlp_node.append(0x9d);
    rlp_node.append(0xb5);
    rlp_node.append(0x55);
    rlp_node.append(0x0c);
    rlp_node.append(0x69);
    rlp_node.append(0xce);
    rlp_node.append(0x2a);
    rlp_node.append(0x24);
    rlp_node.append(0x60);
    rlp_node.append(0xc0);
    rlp_node.append(0x07);
    rlp_node.append(0xad);
    rlp_node.append(0xc4);
    rlp_node.append(0xc1);
    rlp_node.append(0xa3);
    rlp_node.append(0xa0);
    rlp_node.append(0x20);
    rlp_node.append(0xb0);
    rlp_node.append(0x68);
    rlp_node.append(0x3b);
    rlp_node.append(0x66);
    rlp_node.append(0x55);
    rlp_node.append(0xb0);
    rlp_node.append(0x05);
    rlp_node.append(0x9e);
    rlp_node.append(0xe1);
    rlp_node.append(0x03);
    rlp_node.append(0xd0);
    rlp_node.append(0x4e);
    rlp_node.append(0x4b);
    rlp_node.append(0x50);
    rlp_node.append(0x6b);
    rlp_node.append(0xcb);
    rlp_node.append(0xc1);
    rlp_node.append(0x39);
    rlp_node.append(0x00);
    rlp_node.append(0x63);
    rlp_node.append(0x92);
    rlp_node.append(0xb7);
    rlp_node.append(0xda);
    rlp_node.append(0xb1);
    rlp_node.append(0x11);
    rlp_node.append(0x78);
    rlp_node.append(0xc2);
    rlp_node.append(0x66);
    rlp_node.append(0x03);
    rlp_node.append(0x42);
    rlp_node.append(0xe7);
    rlp_node.append(0xa0);
    rlp_node.append(0x8e);
    rlp_node.append(0xed);
    rlp_node.append(0xeb);
    rlp_node.append(0x45);
    rlp_node.append(0xfb);
    rlp_node.append(0x63);
    rlp_node.append(0x0f);
    rlp_node.append(0x1c);
    rlp_node.append(0xd9);
    rlp_node.append(0x97);
    rlp_node.append(0x36);
    rlp_node.append(0xeb);
    rlp_node.append(0x18);
    rlp_node.append(0x57);
    rlp_node.append(0x22);
    rlp_node.append(0x17);
    rlp_node.append(0xcb);
    rlp_node.append(0xc6);
    rlp_node.append(0xd5);
    rlp_node.append(0xf3);
    rlp_node.append(0x15);
    rlp_node.append(0xb7);
    rlp_node.append(0x1b);
    rlp_node.append(0xe2);
    rlp_node.append(0x03);
    rlp_node.append(0xb0);
    rlp_node.append(0x3c);
    rlp_node.append(0xe8);
    rlp_node.append(0xd9);
    rlp_node.append(0x9b);
    rlp_node.append(0x26);
    rlp_node.append(0x14);
    rlp_node.append(0xa0);
    rlp_node.append(0x79);
    rlp_node.append(0x23);
    rlp_node.append(0xa3);
    rlp_node.append(0x3d);
    rlp_node.append(0xf6);
    rlp_node.append(0x5a);
    rlp_node.append(0x98);
    rlp_node.append(0x6f);
    rlp_node.append(0xd5);
    rlp_node.append(0xe7);
    rlp_node.append(0xf9);
    rlp_node.append(0xe6);
    rlp_node.append(0xe4);
    rlp_node.append(0xc2);
    rlp_node.append(0xb9);
    rlp_node.append(0x69);
    rlp_node.append(0x73);
    rlp_node.append(0x6b);
    rlp_node.append(0x08);
    rlp_node.append(0x94);
    rlp_node.append(0x4e);
    rlp_node.append(0xbe);
    rlp_node.append(0x99);
    rlp_node.append(0x39);
    rlp_node.append(0x4a);
    rlp_node.append(0x86);
    rlp_node.append(0x14);
    rlp_node.append(0x61);
    rlp_node.append(0x2f);
    rlp_node.append(0xe6);
    rlp_node.append(0x09);
    rlp_node.append(0xf3);
    rlp_node.append(0xa0);
    rlp_node.append(0x65);
    rlp_node.append(0x34);
    rlp_node.append(0xd7);
    rlp_node.append(0xd0);
    rlp_node.append(0x1a);
    rlp_node.append(0x20);
    rlp_node.append(0x71);
    rlp_node.append(0x4a);
    rlp_node.append(0xa4);
    rlp_node.append(0xfb);
    rlp_node.append(0x2a);
    rlp_node.append(0x55);
    rlp_node.append(0xb9);
    rlp_node.append(0x46);
    rlp_node.append(0xce);
    rlp_node.append(0x64);
    rlp_node.append(0xc3);
    rlp_node.append(0x22);
    rlp_node.append(0x2d);
    rlp_node.append(0xff);
    rlp_node.append(0xad);
    rlp_node.append(0x2a);
    rlp_node.append(0xa2);
    rlp_node.append(0xd1);
    rlp_node.append(0x8a);
    rlp_node.append(0x92);
    rlp_node.append(0x34);
    rlp_node.append(0x73);
    rlp_node.append(0xc9);
    rlp_node.append(0x2a);
    rlp_node.append(0xb1);
    rlp_node.append(0xfd);
    rlp_node.append(0xa0);
    rlp_node.append(0xbf);
    rlp_node.append(0xf9);
    rlp_node.append(0xc2);
    rlp_node.append(0x8b);
    rlp_node.append(0xfe);
    rlp_node.append(0xb8);
    rlp_node.append(0xbf);
    rlp_node.append(0x2d);
    rlp_node.append(0xa9);
    rlp_node.append(0xb6);
    rlp_node.append(0x18);
    rlp_node.append(0xc8);
    rlp_node.append(0xc3);
    rlp_node.append(0xb0);
    rlp_node.append(0x6f);
    rlp_node.append(0xe8);
    rlp_node.append(0x0c);
    rlp_node.append(0xb1);
    rlp_node.append(0xc0);
    rlp_node.append(0xbd);
    rlp_node.append(0x14);
    rlp_node.append(0x47);
    rlp_node.append(0x38);
    rlp_node.append(0xf7);
    rlp_node.append(0xc4);
    rlp_node.append(0x21);
    rlp_node.append(0x61);
    rlp_node.append(0xff);
    rlp_node.append(0x29);
    rlp_node.append(0xe2);
    rlp_node.append(0x50);
    rlp_node.append(0x2f);
    rlp_node.append(0xa0);
    rlp_node.append(0x7f);
    rlp_node.append(0x14);
    rlp_node.append(0x61);
    rlp_node.append(0x69);
    rlp_node.append(0x3c);
    rlp_node.append(0x70);
    rlp_node.append(0x4e);
    rlp_node.append(0xa5);
    rlp_node.append(0x02);
    rlp_node.append(0x1b);
    rlp_node.append(0xbb);
    rlp_node.append(0xa3);
    rlp_node.append(0x5e);
    rlp_node.append(0x72);
    rlp_node.append(0xc5);
    rlp_node.append(0x02);
    rlp_node.append(0xf6);
    rlp_node.append(0x43);
    rlp_node.append(0x9e);
    rlp_node.append(0x45);
    rlp_node.append(0x8f);
    rlp_node.append(0x98);
    rlp_node.append(0x24);
    rlp_node.append(0x2e);
    rlp_node.append(0xd0);
    rlp_node.append(0x37);
    rlp_node.append(0x48);
    rlp_node.append(0xea);
    rlp_node.append(0x8f);
    rlp_node.append(0xe2);
    rlp_node.append(0xb3);
    rlp_node.append(0x5f);
    rlp_node.append(0x80);

    let mut expected = ArrayTrait::new();
    expected.append(0x7770cf09b5067a1b35df62a924898175ceaeecad1f68cdb4a844400c73c14af4);
    expected.append(0x1ea385d05ab261466d5c0487fe684534c19f1a4b5c4b18dc1a363560025071b4);
    expected.append(0x2c4c04ce3540d3d1461872303c53a5e56683c1304f8d36a8800c6af5fa3fcdee);
    expected.append(0xa9dc778dc54b7dd3c48222e739d161feb0c0eeceb2dcd51737f05b8e37a63851);
    expected.append(0xa95f4d5556df62ddc262990497ae569bcd8efdda7b200793f8d3de4cdb9718d7);
    expected.append(0x39d4066d1438226eaf4ac9e943a874a9a9c25fb0d81db9861d8c1336b3e2034c);
    expected.append(0x7acc7c63b46aa418b3c9a041a1256bcb7361316b397ada5a8867491bbb130130);
    expected.append(0x15358a81252ec4937113fe36c78046b711fba1973491bb29187a00785ff852ae);
    expected.append(0x689142d316abfaa71c8bcedf49201ddbb2104e250adc90c4e856221f534a9658);
    expected.append(0xdc3650992534fda8a314a7dbb0ae3ba8c79db5550c69ce2a2460c007adc4c1a3);
    expected.append(0x20b0683b6655b0059ee103d04e4b506bcbc139006392b7dab11178c2660342e7);
    expected.append(0x8eedeb45fb630f1cd99736eb18572217cbc6d5f315b71be203b03ce8d99b2614);
    expected.append(0x7923a33df65a986fd5e7f9e6e4c2b969736b08944ebe99394a8614612fe609f3);
    expected.append(0x6534d7d01a20714aa4fb2a55b946ce64c3222dffad2aa2d18a923473c92ab1fd);
    expected.append(0xbff9c28bfeb8bf2da9b618c8c3b06fe80cb1c0bd144738f7c42161ff29e2502f);
    expected.append(0x7f1461693c704ea5021bbba35e72c502f6439e458f98242ed03748ea8fe2b35f);

    let decoded = MPTTrait::decode_rlp_node(rlp_node.span()).unwrap();
    let expected_value = ArrayTrait::new();
    let expected_node = MPTNode::Branch((expected.span(), expected_value.span()));
    assert(decoded == expected_node, 'Branch node differs');
}

#[test]
#[available_gas(9999999999)]
fn test_decode_rlp_node_leaf_odd() {
    let mut rlp_node  = ArrayTrait::new();
    rlp_node.append(0xf8);
    rlp_node.append(0x66);
    rlp_node.append(0x9d);
    rlp_node.append(0x33);
    rlp_node.append(0x8c);
    rlp_node.append(0xfc);
    rlp_node.append(0x99);
    rlp_node.append(0x7a);
    rlp_node.append(0x82);
    rlp_node.append(0x25);
    rlp_node.append(0x21);
    rlp_node.append(0x67);
    rlp_node.append(0xac);
    rlp_node.append(0x25);
    rlp_node.append(0xa1);
    rlp_node.append(0x65);
    rlp_node.append(0x80);
    rlp_node.append(0xd9);
    rlp_node.append(0x73);
    rlp_node.append(0x03);
    rlp_node.append(0x53);
    rlp_node.append(0xeb);
    rlp_node.append(0x1b);
    rlp_node.append(0x9f);
    rlp_node.append(0x0c);
    rlp_node.append(0x6b);
    rlp_node.append(0xbf);
    rlp_node.append(0x0e);
    rlp_node.append(0x4c);
    rlp_node.append(0x82);
    rlp_node.append(0xc4);
    rlp_node.append(0xd0);
    rlp_node.append(0xb8);
    rlp_node.append(0x46);
    rlp_node.append(0xf8);
    rlp_node.append(0x44);
    rlp_node.append(0x01);
    rlp_node.append(0x80);
    rlp_node.append(0xa0);
    rlp_node.append(0x96);
    rlp_node.append(0xc4);
    rlp_node.append(0xbd);
    rlp_node.append(0xfb);
    rlp_node.append(0x8f);
    rlp_node.append(0x2a);
    rlp_node.append(0xd0);
    rlp_node.append(0x89);
    rlp_node.append(0x20);
    rlp_node.append(0x0b);
    rlp_node.append(0xad);
    rlp_node.append(0x93);
    rlp_node.append(0xf6);
    rlp_node.append(0x21);
    rlp_node.append(0x6f);
    rlp_node.append(0xe9);
    rlp_node.append(0x66);
    rlp_node.append(0x52);
    rlp_node.append(0xf9);
    rlp_node.append(0xe2);
    rlp_node.append(0x76);
    rlp_node.append(0x1b);
    rlp_node.append(0x55);
    rlp_node.append(0xbf);
    rlp_node.append(0xd8);
    rlp_node.append(0xa7);
    rlp_node.append(0x15);
    rlp_node.append(0xad);
    rlp_node.append(0x3d);
    rlp_node.append(0x6e);
    rlp_node.append(0xca);
    rlp_node.append(0xf6);
    rlp_node.append(0xa0);
    rlp_node.append(0x4e);
    rlp_node.append(0x36);
    rlp_node.append(0xf9);
    rlp_node.append(0x6e);
    rlp_node.append(0xe1);
    rlp_node.append(0x66);
    rlp_node.append(0x7a);
    rlp_node.append(0x66);
    rlp_node.append(0x3d);
    rlp_node.append(0xfa);
    rlp_node.append(0xac);
    rlp_node.append(0x57);
    rlp_node.append(0xc4);
    rlp_node.append(0xd1);
    rlp_node.append(0x85);
    rlp_node.append(0xa0);
    rlp_node.append(0xe3);
    rlp_node.append(0x69);
    rlp_node.append(0xa3);
    rlp_node.append(0xa2);
    rlp_node.append(0x17);
    rlp_node.append(0xe0);
    rlp_node.append(0x07);
    rlp_node.append(0x9d);
    rlp_node.append(0x49);
    rlp_node.append(0x62);
    rlp_node.append(0x0f);
    rlp_node.append(0x34);
    rlp_node.append(0xf8);
    rlp_node.append(0x5d);
    rlp_node.append(0x1a);
    rlp_node.append(0xc7);

    let mut expected_key_end = ArrayTrait::new();
    expected_key_end.append(0x3);
    expected_key_end.append(0x8);
    expected_key_end.append(0xc);
    expected_key_end.append(0xf);
    expected_key_end.append(0xc);
    expected_key_end.append(0x9);
    expected_key_end.append(0x9);
    expected_key_end.append(0x7);
    expected_key_end.append(0xa);
    expected_key_end.append(0x8);
    expected_key_end.append(0x2);
    expected_key_end.append(0x2);
    expected_key_end.append(0x5);
    expected_key_end.append(0x2);
    expected_key_end.append(0x1);
    expected_key_end.append(0x6);
    expected_key_end.append(0x7);
    expected_key_end.append(0xa);
    expected_key_end.append(0xc);
    expected_key_end.append(0x2);
    expected_key_end.append(0x5);
    expected_key_end.append(0xa);
    expected_key_end.append(0x1);
    expected_key_end.append(0x6);
    expected_key_end.append(0x5);
    expected_key_end.append(0x8);
    expected_key_end.append(0x0);
    expected_key_end.append(0xd);
    expected_key_end.append(0x9);
    expected_key_end.append(0x7);
    expected_key_end.append(0x3);
    expected_key_end.append(0x0);
    expected_key_end.append(0x3);
    expected_key_end.append(0x5);
    expected_key_end.append(0x3);
    expected_key_end.append(0xe);
    expected_key_end.append(0xb);
    expected_key_end.append(0x1);
    expected_key_end.append(0xb);
    expected_key_end.append(0x9);
    expected_key_end.append(0xf);
    expected_key_end.append(0x0);
    expected_key_end.append(0xc);
    expected_key_end.append(0x6);
    expected_key_end.append(0xb);
    expected_key_end.append(0xb);
    expected_key_end.append(0xf);
    expected_key_end.append(0x0);
    expected_key_end.append(0xe);
    expected_key_end.append(0x4);
    expected_key_end.append(0xc);
    expected_key_end.append(0x8);
    expected_key_end.append(0x2);
    expected_key_end.append(0xc);
    expected_key_end.append(0x4);
    expected_key_end.append(0xd);
    expected_key_end.append(0x0);

    let mut expected_value = ArrayTrait::new();
    expected_value.append(0xf8);
    expected_value.append(0x44);
    expected_value.append(0x01);
    expected_value.append(0x80);
    expected_value.append(0xa0);
    expected_value.append(0x96);
    expected_value.append(0xc4);
    expected_value.append(0xbd);
    expected_value.append(0xfb);
    expected_value.append(0x8f);
    expected_value.append(0x2a);
    expected_value.append(0xd0);
    expected_value.append(0x89);
    expected_value.append(0x20);
    expected_value.append(0x0b);
    expected_value.append(0xad);
    expected_value.append(0x93);
    expected_value.append(0xf6);
    expected_value.append(0x21);
    expected_value.append(0x6f);
    expected_value.append(0xe9);
    expected_value.append(0x66);
    expected_value.append(0x52);
    expected_value.append(0xf9);
    expected_value.append(0xe2);
    expected_value.append(0x76);
    expected_value.append(0x1b);
    expected_value.append(0x55);
    expected_value.append(0xbf);
    expected_value.append(0xd8);
    expected_value.append(0xa7);
    expected_value.append(0x15);
    expected_value.append(0xad);
    expected_value.append(0x3d);
    expected_value.append(0x6e);
    expected_value.append(0xca);
    expected_value.append(0xf6);
    expected_value.append(0xa0);
    expected_value.append(0x4e);
    expected_value.append(0x36);
    expected_value.append(0xf9);
    expected_value.append(0x6e);
    expected_value.append(0xe1);
    expected_value.append(0x66);
    expected_value.append(0x7a);
    expected_value.append(0x66);
    expected_value.append(0x3d);
    expected_value.append(0xfa);
    expected_value.append(0xac);
    expected_value.append(0x57);
    expected_value.append(0xc4);
    expected_value.append(0xd1);
    expected_value.append(0x85);
    expected_value.append(0xa0);
    expected_value.append(0xe3);
    expected_value.append(0x69);
    expected_value.append(0xa3);
    expected_value.append(0xa2);
    expected_value.append(0x17);
    expected_value.append(0xe0);
    expected_value.append(0x07);
    expected_value.append(0x9d);
    expected_value.append(0x49);
    expected_value.append(0x62);
    expected_value.append(0x0f);
    expected_value.append(0x34);
    expected_value.append(0xf8);
    expected_value.append(0x5d);
    expected_value.append(0x1a);
    expected_value.append(0xc7);

    let decoded = MPTTrait::decode_rlp_node(rlp_node.span()).unwrap();
    let expected_node = MPTNode::Leaf((expected_key_end.span(), expected_value.span()));
    assert(decoded == expected_node, 'Odd leaf node differs');
}

#[test]
#[available_gas(9999999999)]
fn test_decode_rlp_node_leaf_even() {
    let mut rlp_node  = ArrayTrait::new();
    rlp_node.append(0xf8);
    rlp_node.append(0x66);
    rlp_node.append(0x9d);
    rlp_node.append(0x23);
    rlp_node.append(0x8c);
    rlp_node.append(0xfc);
    rlp_node.append(0x99);
    rlp_node.append(0x7a);
    rlp_node.append(0x82);
    rlp_node.append(0x25);
    rlp_node.append(0x21);
    rlp_node.append(0x67);
    rlp_node.append(0xac);
    rlp_node.append(0x25);
    rlp_node.append(0xa1);
    rlp_node.append(0x65);
    rlp_node.append(0x80);
    rlp_node.append(0xd9);
    rlp_node.append(0x73);
    rlp_node.append(0x03);
    rlp_node.append(0x53);
    rlp_node.append(0xeb);
    rlp_node.append(0x1b);
    rlp_node.append(0x9f);
    rlp_node.append(0x0c);
    rlp_node.append(0x6b);
    rlp_node.append(0xbf);
    rlp_node.append(0x0e);
    rlp_node.append(0x4c);
    rlp_node.append(0x82);
    rlp_node.append(0xc4);
    rlp_node.append(0xd0);
    rlp_node.append(0xb8);
    rlp_node.append(0x46);
    rlp_node.append(0xf8);
    rlp_node.append(0x44);
    rlp_node.append(0x01);
    rlp_node.append(0x80);
    rlp_node.append(0xa0);
    rlp_node.append(0x96);
    rlp_node.append(0xc4);
    rlp_node.append(0xbd);
    rlp_node.append(0xfb);
    rlp_node.append(0x8f);
    rlp_node.append(0x2a);
    rlp_node.append(0xd0);
    rlp_node.append(0x89);
    rlp_node.append(0x20);
    rlp_node.append(0x0b);
    rlp_node.append(0xad);
    rlp_node.append(0x93);
    rlp_node.append(0xf6);
    rlp_node.append(0x21);
    rlp_node.append(0x6f);
    rlp_node.append(0xe9);
    rlp_node.append(0x66);
    rlp_node.append(0x52);
    rlp_node.append(0xf9);
    rlp_node.append(0xe2);
    rlp_node.append(0x76);
    rlp_node.append(0x1b);
    rlp_node.append(0x55);
    rlp_node.append(0xbf);
    rlp_node.append(0xd8);
    rlp_node.append(0xa7);
    rlp_node.append(0x15);
    rlp_node.append(0xad);
    rlp_node.append(0x3d);
    rlp_node.append(0x6e);
    rlp_node.append(0xca);
    rlp_node.append(0xf6);
    rlp_node.append(0xa0);
    rlp_node.append(0x4e);
    rlp_node.append(0x36);
    rlp_node.append(0xf9);
    rlp_node.append(0x6e);
    rlp_node.append(0xe1);
    rlp_node.append(0x66);
    rlp_node.append(0x7a);
    rlp_node.append(0x66);
    rlp_node.append(0x3d);
    rlp_node.append(0xfa);
    rlp_node.append(0xac);
    rlp_node.append(0x57);
    rlp_node.append(0xc4);
    rlp_node.append(0xd1);
    rlp_node.append(0x85);
    rlp_node.append(0xa0);
    rlp_node.append(0xe3);
    rlp_node.append(0x69);
    rlp_node.append(0xa3);
    rlp_node.append(0xa2);
    rlp_node.append(0x17);
    rlp_node.append(0xe0);
    rlp_node.append(0x07);
    rlp_node.append(0x9d);
    rlp_node.append(0x49);
    rlp_node.append(0x62);
    rlp_node.append(0x0f);
    rlp_node.append(0x34);
    rlp_node.append(0xf8);
    rlp_node.append(0x5d);
    rlp_node.append(0x1a);
    rlp_node.append(0xc7);

    let mut expected_key_end = ArrayTrait::new();
    expected_key_end.append(0x8);
    expected_key_end.append(0xc);
    expected_key_end.append(0xf);
    expected_key_end.append(0xc);
    expected_key_end.append(0x9);
    expected_key_end.append(0x9);
    expected_key_end.append(0x7);
    expected_key_end.append(0xa);
    expected_key_end.append(0x8);
    expected_key_end.append(0x2);
    expected_key_end.append(0x2);
    expected_key_end.append(0x5);
    expected_key_end.append(0x2);
    expected_key_end.append(0x1);
    expected_key_end.append(0x6);
    expected_key_end.append(0x7);
    expected_key_end.append(0xa);
    expected_key_end.append(0xc);
    expected_key_end.append(0x2);
    expected_key_end.append(0x5);
    expected_key_end.append(0xa);
    expected_key_end.append(0x1);
    expected_key_end.append(0x6);
    expected_key_end.append(0x5);
    expected_key_end.append(0x8);
    expected_key_end.append(0x0);
    expected_key_end.append(0xd);
    expected_key_end.append(0x9);
    expected_key_end.append(0x7);
    expected_key_end.append(0x3);
    expected_key_end.append(0x0);
    expected_key_end.append(0x3);
    expected_key_end.append(0x5);
    expected_key_end.append(0x3);
    expected_key_end.append(0xe);
    expected_key_end.append(0xb);
    expected_key_end.append(0x1);
    expected_key_end.append(0xb);
    expected_key_end.append(0x9);
    expected_key_end.append(0xf);
    expected_key_end.append(0x0);
    expected_key_end.append(0xc);
    expected_key_end.append(0x6);
    expected_key_end.append(0xb);
    expected_key_end.append(0xb);
    expected_key_end.append(0xf);
    expected_key_end.append(0x0);
    expected_key_end.append(0xe);
    expected_key_end.append(0x4);
    expected_key_end.append(0xc);
    expected_key_end.append(0x8);
    expected_key_end.append(0x2);
    expected_key_end.append(0xc);
    expected_key_end.append(0x4);
    expected_key_end.append(0xd);
    expected_key_end.append(0x0);

    let mut expected_value = ArrayTrait::new();
    expected_value.append(0xf8);
    expected_value.append(0x44);
    expected_value.append(0x01);
    expected_value.append(0x80);
    expected_value.append(0xa0);
    expected_value.append(0x96);
    expected_value.append(0xc4);
    expected_value.append(0xbd);
    expected_value.append(0xfb);
    expected_value.append(0x8f);
    expected_value.append(0x2a);
    expected_value.append(0xd0);
    expected_value.append(0x89);
    expected_value.append(0x20);
    expected_value.append(0x0b);
    expected_value.append(0xad);
    expected_value.append(0x93);
    expected_value.append(0xf6);
    expected_value.append(0x21);
    expected_value.append(0x6f);
    expected_value.append(0xe9);
    expected_value.append(0x66);
    expected_value.append(0x52);
    expected_value.append(0xf9);
    expected_value.append(0xe2);
    expected_value.append(0x76);
    expected_value.append(0x1b);
    expected_value.append(0x55);
    expected_value.append(0xbf);
    expected_value.append(0xd8);
    expected_value.append(0xa7);
    expected_value.append(0x15);
    expected_value.append(0xad);
    expected_value.append(0x3d);
    expected_value.append(0x6e);
    expected_value.append(0xca);
    expected_value.append(0xf6);
    expected_value.append(0xa0);
    expected_value.append(0x4e);
    expected_value.append(0x36);
    expected_value.append(0xf9);
    expected_value.append(0x6e);
    expected_value.append(0xe1);
    expected_value.append(0x66);
    expected_value.append(0x7a);
    expected_value.append(0x66);
    expected_value.append(0x3d);
    expected_value.append(0xfa);
    expected_value.append(0xac);
    expected_value.append(0x57);
    expected_value.append(0xc4);
    expected_value.append(0xd1);
    expected_value.append(0x85);
    expected_value.append(0xa0);
    expected_value.append(0xe3);
    expected_value.append(0x69);
    expected_value.append(0xa3);
    expected_value.append(0xa2);
    expected_value.append(0x17);
    expected_value.append(0xe0);
    expected_value.append(0x07);
    expected_value.append(0x9d);
    expected_value.append(0x49);
    expected_value.append(0x62);
    expected_value.append(0x0f);
    expected_value.append(0x34);
    expected_value.append(0xf8);
    expected_value.append(0x5d);
    expected_value.append(0x1a);
    expected_value.append(0xc7);

    let decoded = MPTTrait::decode_rlp_node(rlp_node.span()).unwrap();
    let expected_node = MPTNode::Leaf((expected_key_end.span(), expected_value.span()));
    assert(decoded == expected_node, 'Even leaf node differs');
}

const KECCAK_FULL_RATE_IN_BYTES: usize = 136;
const KECCAK_FULL_RATE_IN_U64S: usize = 17;
const BYTES_IN_U64_WORD: usize = 8;

#[test]
#[available_gas(9999999999)]
fn test_keccak_node() {
    let mut rlp_node = ArrayTrait::<u64>::new();
    rlp_node.append(3486121673926654310);
    rlp_node.append(7292235332718256435);
    rlp_node.append(7003436509876729187);
    rlp_node.append(7219327812702266213);
    rlp_node.append(7220226096555374689);
    rlp_node.append(7233125365159899489);
    rlp_node.append(7147319468316113252);
    rlp_node.append(3688556075549287218);
    rlp_node.append(3474355804310091577);
    rlp_node.append(7365974978555097185);
    rlp_node.append(7365974956278364259);
    rlp_node.append(3979039338107331639);
    rlp_node.append(7076059244337980005);
    rlp_node.append(3761685895287366962);
    rlp_node.append(3761176606574654050);
    rlp_node.append(3544392711566078264);
    rlp_node.append(7220177730076238387);
    rlp_node.append(3544444374838501938);
    rlp_node.append(7293923981556658278);
    rlp_node.append(3544390314082198628);
    rlp_node.append(7149522928339936050);
    rlp_node.append(4049974339363562551);
    rlp_node.append(7305226968821477990);
    rlp_node.append(3486683546699392100);
    rlp_node.append(3991368183484606050);
    rlp_node.append(3991368363819742050);
    rlp_node.append(7148165203143702580);
    rlp_node.append(3472668066798855267);
    rlp_node.append(3760898631926047539);
    rlp_node.append(3473174921037309233);
    rlp_node.append(3690754004309585974);
    rlp_node.append(3761179930896131428);
    rlp_node.append(3690756177545672546);
    rlp_node.append(3486129379940119138);
    rlp_node.append(3904681776986415969);
    rlp_node.append(4123099572784411445);
    rlp_node.append(3617343095402739041);
    rlp_node.append(4122029729982592611);
    rlp_node.append(7234576750572746805);
    rlp_node.append(7161117256848650597);
    rlp_node.append(7363446083778929250);
    rlp_node.append(3775201985518855473);
    rlp_node.append(7233685218427940961);
    rlp_node.append(3690246020542260793);
    rlp_node.append(7365979573314465889);
    rlp_node.append(3631416651720045104);
    rlp_node.append(3761128237408018738);
    rlp_node.append(7220453694707939120);
    rlp_node.append(4049690880111699044);
    rlp_node.append(3702584731388622640);
    rlp_node.append(4049355528950855472);
    rlp_node.append(3991094409364124513);
    rlp_node.append(3991652037853340976);
    rlp_node.append(3976788667836479028);
    rlp_node.append(3545518421622219877);
    rlp_node.append(7292511112655025509);
    rlp_node.append(3977859587836621360);
    rlp_node.append(4048843135138226788);
    rlp_node.append(3833460902626342754);
    rlp_node.append(7306020816233247842);
    rlp_node.append(7364287236041815604);
    rlp_node.append(7004560000307114595);
    rlp_node.append(3689966959320445028);
    rlp_node.append(4121699894482461241);
    rlp_node.append(3559593265654740020);
    rlp_node.append(4122823775046951479);
    rlp_node.append(3486175756239189554);
    rlp_node.append(7233682816752630073);
    rlp_node.append(7306637633733800498);
    rlp_node.append(3775254761979327538);
    rlp_node.append(3919036802461153072);
    rlp_node.append(3978988790587352625);
    rlp_node.append(7004052025938163507);
    rlp_node.append(3474307434404996663);
    rlp_node.append(3702584732213786725);
    rlp_node.append(7149242514186252385);
    rlp_node.append(3762530119042217273);
    rlp_node.append(7364057407996442466);
    rlp_node.append(7148166312084582456);
    rlp_node.append(3690810061467181366);
    rlp_node.append(3774360847010246963);
    rlp_node.append(3691090437653936176);
    rlp_node.append(7076055940683228516);
    rlp_node.append(7293071829124604211);
    rlp_node.append(3761405519758190128);
    rlp_node.append(4122590493780947760);
    rlp_node.append(7291720744163358001);
    rlp_node.append(3691037880206309172);
    rlp_node.append(7363494450194441017);
    rlp_node.append(4048790375813560628);
    rlp_node.append(3919033487498634552);
    rlp_node.append(3833179427713464421);
    rlp_node.append(4049641402122330466);
    rlp_node.append(3904731073849079344);
    rlp_node.append(3978193814420731957);
    rlp_node.append(7305177684222960485);
    rlp_node.append(7016952612255262261);
    rlp_node.append(3977911450355184178);
    rlp_node.append(3906651009998546480);
    rlp_node.append(3486125006908567861);
    rlp_node.append(3919647023526129716);
    rlp_node.append(3834026975018116408);
    rlp_node.append(4121469198095639352);
    rlp_node.append(3976737179785573425);
    rlp_node.append(7365415317778162232);
    rlp_node.append(3762816193948705332);
    rlp_node.append(3847826038535317041);
    rlp_node.append(3906366228749641313);
    rlp_node.append(3689353411198922849);
    rlp_node.append(3907213749529306677);
    rlp_node.append(7077519171583042609);
    rlp_node.append(3847029794564879458);
    rlp_node.append(3976739172633502819);
    rlp_node.append(7233405766310638898);
    rlp_node.append(4123152319341670755);
    rlp_node.append(3977867464836985401);
    rlp_node.append(7149292026454946405);
    rlp_node.append(3763146953691915576);
    rlp_node.append(3619035248800968805);
    rlp_node.append(7365744051001505329);
    rlp_node.append(3760612565632301111);
    rlp_node.append(7089282880932098865);
    rlp_node.append(3990863516150478643);
    rlp_node.append(3617289031078983269);
    rlp_node.append(7365408909670310199);
    rlp_node.append(3546131025776292664);
    rlp_node.append(7365463688434825009);
    rlp_node.append(3775533136862078008);
    rlp_node.append(3616729580816120118);
    rlp_node.append(3919314068249392434);
    rlp_node.append(7147837562436335201);
    rlp_node.append(4134639144178705720);
    rlp_node.append(3474586903665783348);
    let hash = cairo_keccak(ref rlp_node, 3474586903665783348, 8);
    'hash'.print();
    hash.print();
}

// Computes the keccak of `input` + `last_input_num_bytes` LSB bytes of `last_input_word`.
// To use this function, split the input into words of 64 bits (little endian).
// For example, to compute keccak('Hello world!'), use:
//   inputs = [8031924123371070792, 560229490]
// where:
//   8031924123371070792 == int.from_bytes(b'Hello wo', 'little')
//   560229490 == int.from_bytes(b'rld!', 'little')
//
// Returns the hash as a little endian u256.
fn cairo_keccak(ref input: Array<u64>, last_input_word: u64, last_input_num_bytes: usize) -> u256 {
    add_padding(ref input, last_input_word, last_input_num_bytes);
    starknet::syscalls::keccak_syscall(input.span()).unwrap_syscall()
}

// The padding in keccak256 is "1 0* 1".
// `last_input_num_bytes` (0-7) is the number of bytes in the last u64 input - `last_input_word`.
fn add_padding(ref input: Array<u64>, last_input_word: u64, last_input_num_bytes: usize) {
    let words_divisor = KECCAK_FULL_RATE_IN_U64S.try_into().unwrap();
    // `last_block_num_full_words` is in range [0, KECCAK_FULL_RATE_IN_U64S - 1]
    let (_, last_block_num_full_words) = integer::u32_safe_divmod(input.len(), words_divisor);
    // `last_block_num_bytes` is in range [0, KECCAK_FULL_RATE_IN_BYTES - 1]
    let last_block_num_bytes = last_block_num_full_words * BYTES_IN_U64_WORD + last_input_num_bytes;

    // The first word to append would be of the form
    //     0x1<`last_input_num_bytes` LSB bytes of `last_input_word`>.
    // For example, for `last_input_num_bytes == 4`:
    //     0x1000000 + (last_input_word & 0xffffff)
    let first_word_to_append = if last_input_num_bytes == 0 {
        // This case is handled separately to avoid unnecessary computations.
        1
    } else {
        let first_padding_byte_part = if last_input_num_bytes == 1 {
            0x100
        } else if last_input_num_bytes == 2 {
            0x10000
        } else if last_input_num_bytes == 3 {
            0x1000000
        } else if last_input_num_bytes == 4 {
            0x100000000
        } else if last_input_num_bytes == 5 {
            0x10000000000
        } else if last_input_num_bytes == 6 {
            0x1000000000000
        } else if last_input_num_bytes == 7 {
            0x100000000000000
        } else {
            panic_with_felt252('Keccak last input word >7b')
        };
        let (_, r) = integer::u64_safe_divmod(
            last_input_word, first_padding_byte_part.try_into().unwrap()
        );
        first_padding_byte_part + r
    };

    if last_block_num_full_words == KECCAK_FULL_RATE_IN_U64S - 1 {
        input.append(0x8000000000000000 + first_word_to_append);
        return;
    }

    // last_block_num_full_words < KECCAK_FULL_RATE_IN_U64S - 1
    input.append(first_word_to_append);
    finalize_padding(ref input, KECCAK_FULL_RATE_IN_U64S - 1 - last_block_num_full_words);
}

// Finalize the padding by appending "0* 1".
fn finalize_padding(ref input: Array<u64>, num_padding_words: u32) {
    if (num_padding_words == 1) {
        input.append(0x8000000000000000);
        return;
    }

    input.append(0);
    finalize_padding(ref input, num_padding_words - 1);
}

