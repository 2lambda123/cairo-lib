use cairo_lib::data_structures::eth_mpt::{MPTNode, MPTTrait};
use array::{ArrayTrait, SpanTrait};
use result::ResultTrait;

use debug::PrintTrait;
use starknet::SyscallResultTrait;
use traits::TryInto;
use option::OptionTrait;

#[test]
#[available_gas(9999999999)]
fn test_decode_rlp_node_branch() {
    let mut rlp_node  = ArrayTrait::new();
    rlp_node.append(0xf9);
    rlp_node.append(0x02);
    rlp_node.append(0x11);
    rlp_node.append(0xa0);
    rlp_node.append(0x77);
    rlp_node.append(0x70);
    rlp_node.append(0xcf);
    rlp_node.append(0x09);
    rlp_node.append(0xb5);
    rlp_node.append(0x06);
    rlp_node.append(0x7a);
    rlp_node.append(0x1b);
    rlp_node.append(0x35);
    rlp_node.append(0xdf);
    rlp_node.append(0x62);
    rlp_node.append(0xa9);
    rlp_node.append(0x24);
    rlp_node.append(0x89);
    rlp_node.append(0x81);
    rlp_node.append(0x75);
    rlp_node.append(0xce);
    rlp_node.append(0xae);
    rlp_node.append(0xec);
    rlp_node.append(0xad);
    rlp_node.append(0x1f);
    rlp_node.append(0x68);
    rlp_node.append(0xcd);
    rlp_node.append(0xb4);
    rlp_node.append(0xa8);
    rlp_node.append(0x44);
    rlp_node.append(0x40);
    rlp_node.append(0x0c);
    rlp_node.append(0x73);
    rlp_node.append(0xc1);
    rlp_node.append(0x4a);
    rlp_node.append(0xf4);
    rlp_node.append(0xa0);
    rlp_node.append(0x1e);
    rlp_node.append(0xa3);
    rlp_node.append(0x85);
    rlp_node.append(0xd0);
    rlp_node.append(0x5a);
    rlp_node.append(0xb2);
    rlp_node.append(0x61);
    rlp_node.append(0x46);
    rlp_node.append(0x6d);
    rlp_node.append(0x5c);
    rlp_node.append(0x04);
    rlp_node.append(0x87);
    rlp_node.append(0xfe);
    rlp_node.append(0x68);
    rlp_node.append(0x45);
    rlp_node.append(0x34);
    rlp_node.append(0xc1);
    rlp_node.append(0x9f);
    rlp_node.append(0x1a);
    rlp_node.append(0x4b);
    rlp_node.append(0x5c);
    rlp_node.append(0x4b);
    rlp_node.append(0x18);
    rlp_node.append(0xdc);
    rlp_node.append(0x1a);
    rlp_node.append(0x36);
    rlp_node.append(0x35);
    rlp_node.append(0x60);
    rlp_node.append(0x02);
    rlp_node.append(0x50);
    rlp_node.append(0x71);
    rlp_node.append(0xb4);
    rlp_node.append(0xa0);
    rlp_node.append(0x2c);
    rlp_node.append(0x4c);
    rlp_node.append(0x04);
    rlp_node.append(0xce);
    rlp_node.append(0x35);
    rlp_node.append(0x40);
    rlp_node.append(0xd3);
    rlp_node.append(0xd1);
    rlp_node.append(0x46);
    rlp_node.append(0x18);
    rlp_node.append(0x72);
    rlp_node.append(0x30);
    rlp_node.append(0x3c);
    rlp_node.append(0x53);
    rlp_node.append(0xa5);
    rlp_node.append(0xe5);
    rlp_node.append(0x66);
    rlp_node.append(0x83);
    rlp_node.append(0xc1);
    rlp_node.append(0x30);
    rlp_node.append(0x4f);
    rlp_node.append(0x8d);
    rlp_node.append(0x36);
    rlp_node.append(0xa8);
    rlp_node.append(0x80);
    rlp_node.append(0x0c);
    rlp_node.append(0x6a);
    rlp_node.append(0xf5);
    rlp_node.append(0xfa);
    rlp_node.append(0x3f);
    rlp_node.append(0xcd);
    rlp_node.append(0xee);
    rlp_node.append(0xa0);
    rlp_node.append(0xa9);
    rlp_node.append(0xdc);
    rlp_node.append(0x77);
    rlp_node.append(0x8d);
    rlp_node.append(0xc5);
    rlp_node.append(0x4b);
    rlp_node.append(0x7d);
    rlp_node.append(0xd3);
    rlp_node.append(0xc4);
    rlp_node.append(0x82);
    rlp_node.append(0x22);
    rlp_node.append(0xe7);
    rlp_node.append(0x39);
    rlp_node.append(0xd1);
    rlp_node.append(0x61);
    rlp_node.append(0xfe);
    rlp_node.append(0xb0);
    rlp_node.append(0xc0);
    rlp_node.append(0xee);
    rlp_node.append(0xce);
    rlp_node.append(0xb2);
    rlp_node.append(0xdc);
    rlp_node.append(0xd5);
    rlp_node.append(0x17);
    rlp_node.append(0x37);
    rlp_node.append(0xf0);
    rlp_node.append(0x5b);
    rlp_node.append(0x8e);
    rlp_node.append(0x37);
    rlp_node.append(0xa6);
    rlp_node.append(0x38);
    rlp_node.append(0x51);
    rlp_node.append(0xa0);
    rlp_node.append(0xa9);
    rlp_node.append(0x5f);
    rlp_node.append(0x4d);
    rlp_node.append(0x55);
    rlp_node.append(0x56);
    rlp_node.append(0xdf);
    rlp_node.append(0x62);
    rlp_node.append(0xdd);
    rlp_node.append(0xc2);
    rlp_node.append(0x62);
    rlp_node.append(0x99);
    rlp_node.append(0x04);
    rlp_node.append(0x97);
    rlp_node.append(0xae);
    rlp_node.append(0x56);
    rlp_node.append(0x9b);
    rlp_node.append(0xcd);
    rlp_node.append(0x8e);
    rlp_node.append(0xfd);
    rlp_node.append(0xda);
    rlp_node.append(0x7b);
    rlp_node.append(0x20);
    rlp_node.append(0x07);
    rlp_node.append(0x93);
    rlp_node.append(0xf8);
    rlp_node.append(0xd3);
    rlp_node.append(0xde);
    rlp_node.append(0x4c);
    rlp_node.append(0xdb);
    rlp_node.append(0x97);
    rlp_node.append(0x18);
    rlp_node.append(0xd7);
    rlp_node.append(0xa0);
    rlp_node.append(0x39);
    rlp_node.append(0xd4);
    rlp_node.append(0x06);
    rlp_node.append(0x6d);
    rlp_node.append(0x14);
    rlp_node.append(0x38);
    rlp_node.append(0x22);
    rlp_node.append(0x6e);
    rlp_node.append(0xaf);
    rlp_node.append(0x4a);
    rlp_node.append(0xc9);
    rlp_node.append(0xe9);
    rlp_node.append(0x43);
    rlp_node.append(0xa8);
    rlp_node.append(0x74);
    rlp_node.append(0xa9);
    rlp_node.append(0xa9);
    rlp_node.append(0xc2);
    rlp_node.append(0x5f);
    rlp_node.append(0xb0);
    rlp_node.append(0xd8);
    rlp_node.append(0x1d);
    rlp_node.append(0xb9);
    rlp_node.append(0x86);
    rlp_node.append(0x1d);
    rlp_node.append(0x8c);
    rlp_node.append(0x13);
    rlp_node.append(0x36);
    rlp_node.append(0xb3);
    rlp_node.append(0xe2);
    rlp_node.append(0x03);
    rlp_node.append(0x4c);
    rlp_node.append(0xa0);
    rlp_node.append(0x7a);
    rlp_node.append(0xcc);
    rlp_node.append(0x7c);
    rlp_node.append(0x63);
    rlp_node.append(0xb4);
    rlp_node.append(0x6a);
    rlp_node.append(0xa4);
    rlp_node.append(0x18);
    rlp_node.append(0xb3);
    rlp_node.append(0xc9);
    rlp_node.append(0xa0);
    rlp_node.append(0x41);
    rlp_node.append(0xa1);
    rlp_node.append(0x25);
    rlp_node.append(0x6b);
    rlp_node.append(0xcb);
    rlp_node.append(0x73);
    rlp_node.append(0x61);
    rlp_node.append(0x31);
    rlp_node.append(0x6b);
    rlp_node.append(0x39);
    rlp_node.append(0x7a);
    rlp_node.append(0xda);
    rlp_node.append(0x5a);
    rlp_node.append(0x88);
    rlp_node.append(0x67);
    rlp_node.append(0x49);
    rlp_node.append(0x1b);
    rlp_node.append(0xbb);
    rlp_node.append(0x13);
    rlp_node.append(0x01);
    rlp_node.append(0x30);
    rlp_node.append(0xa0);
    rlp_node.append(0x15);
    rlp_node.append(0x35);
    rlp_node.append(0x8a);
    rlp_node.append(0x81);
    rlp_node.append(0x25);
    rlp_node.append(0x2e);
    rlp_node.append(0xc4);
    rlp_node.append(0x93);
    rlp_node.append(0x71);
    rlp_node.append(0x13);
    rlp_node.append(0xfe);
    rlp_node.append(0x36);
    rlp_node.append(0xc7);
    rlp_node.append(0x80);
    rlp_node.append(0x46);
    rlp_node.append(0xb7);
    rlp_node.append(0x11);
    rlp_node.append(0xfb);
    rlp_node.append(0xa1);
    rlp_node.append(0x97);
    rlp_node.append(0x34);
    rlp_node.append(0x91);
    rlp_node.append(0xbb);
    rlp_node.append(0x29);
    rlp_node.append(0x18);
    rlp_node.append(0x7a);
    rlp_node.append(0x00);
    rlp_node.append(0x78);
    rlp_node.append(0x5f);
    rlp_node.append(0xf8);
    rlp_node.append(0x52);
    rlp_node.append(0xae);
    rlp_node.append(0xa0);
    rlp_node.append(0x68);
    rlp_node.append(0x91);
    rlp_node.append(0x42);
    rlp_node.append(0xd3);
    rlp_node.append(0x16);
    rlp_node.append(0xab);
    rlp_node.append(0xfa);
    rlp_node.append(0xa7);
    rlp_node.append(0x1c);
    rlp_node.append(0x8b);
    rlp_node.append(0xce);
    rlp_node.append(0xdf);
    rlp_node.append(0x49);
    rlp_node.append(0x20);
    rlp_node.append(0x1d);
    rlp_node.append(0xdb);
    rlp_node.append(0xb2);
    rlp_node.append(0x10);
    rlp_node.append(0x4e);
    rlp_node.append(0x25);
    rlp_node.append(0x0a);
    rlp_node.append(0xdc);
    rlp_node.append(0x90);
    rlp_node.append(0xc4);
    rlp_node.append(0xe8);
    rlp_node.append(0x56);
    rlp_node.append(0x22);
    rlp_node.append(0x1f);
    rlp_node.append(0x53);
    rlp_node.append(0x4a);
    rlp_node.append(0x96);
    rlp_node.append(0x58);
    rlp_node.append(0xa0);
    rlp_node.append(0xdc);
    rlp_node.append(0x36);
    rlp_node.append(0x50);
    rlp_node.append(0x99);
    rlp_node.append(0x25);
    rlp_node.append(0x34);
    rlp_node.append(0xfd);
    rlp_node.append(0xa8);
    rlp_node.append(0xa3);
    rlp_node.append(0x14);
    rlp_node.append(0xa7);
    rlp_node.append(0xdb);
    rlp_node.append(0xb0);
    rlp_node.append(0xae);
    rlp_node.append(0x3b);
    rlp_node.append(0xa8);
    rlp_node.append(0xc7);
    rlp_node.append(0x9d);
    rlp_node.append(0xb5);
    rlp_node.append(0x55);
    rlp_node.append(0x0c);
    rlp_node.append(0x69);
    rlp_node.append(0xce);
    rlp_node.append(0x2a);
    rlp_node.append(0x24);
    rlp_node.append(0x60);
    rlp_node.append(0xc0);
    rlp_node.append(0x07);
    rlp_node.append(0xad);
    rlp_node.append(0xc4);
    rlp_node.append(0xc1);
    rlp_node.append(0xa3);
    rlp_node.append(0xa0);
    rlp_node.append(0x20);
    rlp_node.append(0xb0);
    rlp_node.append(0x68);
    rlp_node.append(0x3b);
    rlp_node.append(0x66);
    rlp_node.append(0x55);
    rlp_node.append(0xb0);
    rlp_node.append(0x05);
    rlp_node.append(0x9e);
    rlp_node.append(0xe1);
    rlp_node.append(0x03);
    rlp_node.append(0xd0);
    rlp_node.append(0x4e);
    rlp_node.append(0x4b);
    rlp_node.append(0x50);
    rlp_node.append(0x6b);
    rlp_node.append(0xcb);
    rlp_node.append(0xc1);
    rlp_node.append(0x39);
    rlp_node.append(0x00);
    rlp_node.append(0x63);
    rlp_node.append(0x92);
    rlp_node.append(0xb7);
    rlp_node.append(0xda);
    rlp_node.append(0xb1);
    rlp_node.append(0x11);
    rlp_node.append(0x78);
    rlp_node.append(0xc2);
    rlp_node.append(0x66);
    rlp_node.append(0x03);
    rlp_node.append(0x42);
    rlp_node.append(0xe7);
    rlp_node.append(0xa0);
    rlp_node.append(0x8e);
    rlp_node.append(0xed);
    rlp_node.append(0xeb);
    rlp_node.append(0x45);
    rlp_node.append(0xfb);
    rlp_node.append(0x63);
    rlp_node.append(0x0f);
    rlp_node.append(0x1c);
    rlp_node.append(0xd9);
    rlp_node.append(0x97);
    rlp_node.append(0x36);
    rlp_node.append(0xeb);
    rlp_node.append(0x18);
    rlp_node.append(0x57);
    rlp_node.append(0x22);
    rlp_node.append(0x17);
    rlp_node.append(0xcb);
    rlp_node.append(0xc6);
    rlp_node.append(0xd5);
    rlp_node.append(0xf3);
    rlp_node.append(0x15);
    rlp_node.append(0xb7);
    rlp_node.append(0x1b);
    rlp_node.append(0xe2);
    rlp_node.append(0x03);
    rlp_node.append(0xb0);
    rlp_node.append(0x3c);
    rlp_node.append(0xe8);
    rlp_node.append(0xd9);
    rlp_node.append(0x9b);
    rlp_node.append(0x26);
    rlp_node.append(0x14);
    rlp_node.append(0xa0);
    rlp_node.append(0x79);
    rlp_node.append(0x23);
    rlp_node.append(0xa3);
    rlp_node.append(0x3d);
    rlp_node.append(0xf6);
    rlp_node.append(0x5a);
    rlp_node.append(0x98);
    rlp_node.append(0x6f);
    rlp_node.append(0xd5);
    rlp_node.append(0xe7);
    rlp_node.append(0xf9);
    rlp_node.append(0xe6);
    rlp_node.append(0xe4);
    rlp_node.append(0xc2);
    rlp_node.append(0xb9);
    rlp_node.append(0x69);
    rlp_node.append(0x73);
    rlp_node.append(0x6b);
    rlp_node.append(0x08);
    rlp_node.append(0x94);
    rlp_node.append(0x4e);
    rlp_node.append(0xbe);
    rlp_node.append(0x99);
    rlp_node.append(0x39);
    rlp_node.append(0x4a);
    rlp_node.append(0x86);
    rlp_node.append(0x14);
    rlp_node.append(0x61);
    rlp_node.append(0x2f);
    rlp_node.append(0xe6);
    rlp_node.append(0x09);
    rlp_node.append(0xf3);
    rlp_node.append(0xa0);
    rlp_node.append(0x65);
    rlp_node.append(0x34);
    rlp_node.append(0xd7);
    rlp_node.append(0xd0);
    rlp_node.append(0x1a);
    rlp_node.append(0x20);
    rlp_node.append(0x71);
    rlp_node.append(0x4a);
    rlp_node.append(0xa4);
    rlp_node.append(0xfb);
    rlp_node.append(0x2a);
    rlp_node.append(0x55);
    rlp_node.append(0xb9);
    rlp_node.append(0x46);
    rlp_node.append(0xce);
    rlp_node.append(0x64);
    rlp_node.append(0xc3);
    rlp_node.append(0x22);
    rlp_node.append(0x2d);
    rlp_node.append(0xff);
    rlp_node.append(0xad);
    rlp_node.append(0x2a);
    rlp_node.append(0xa2);
    rlp_node.append(0xd1);
    rlp_node.append(0x8a);
    rlp_node.append(0x92);
    rlp_node.append(0x34);
    rlp_node.append(0x73);
    rlp_node.append(0xc9);
    rlp_node.append(0x2a);
    rlp_node.append(0xb1);
    rlp_node.append(0xfd);
    rlp_node.append(0xa0);
    rlp_node.append(0xbf);
    rlp_node.append(0xf9);
    rlp_node.append(0xc2);
    rlp_node.append(0x8b);
    rlp_node.append(0xfe);
    rlp_node.append(0xb8);
    rlp_node.append(0xbf);
    rlp_node.append(0x2d);
    rlp_node.append(0xa9);
    rlp_node.append(0xb6);
    rlp_node.append(0x18);
    rlp_node.append(0xc8);
    rlp_node.append(0xc3);
    rlp_node.append(0xb0);
    rlp_node.append(0x6f);
    rlp_node.append(0xe8);
    rlp_node.append(0x0c);
    rlp_node.append(0xb1);
    rlp_node.append(0xc0);
    rlp_node.append(0xbd);
    rlp_node.append(0x14);
    rlp_node.append(0x47);
    rlp_node.append(0x38);
    rlp_node.append(0xf7);
    rlp_node.append(0xc4);
    rlp_node.append(0x21);
    rlp_node.append(0x61);
    rlp_node.append(0xff);
    rlp_node.append(0x29);
    rlp_node.append(0xe2);
    rlp_node.append(0x50);
    rlp_node.append(0x2f);
    rlp_node.append(0xa0);
    rlp_node.append(0x7f);
    rlp_node.append(0x14);
    rlp_node.append(0x61);
    rlp_node.append(0x69);
    rlp_node.append(0x3c);
    rlp_node.append(0x70);
    rlp_node.append(0x4e);
    rlp_node.append(0xa5);
    rlp_node.append(0x02);
    rlp_node.append(0x1b);
    rlp_node.append(0xbb);
    rlp_node.append(0xa3);
    rlp_node.append(0x5e);
    rlp_node.append(0x72);
    rlp_node.append(0xc5);
    rlp_node.append(0x02);
    rlp_node.append(0xf6);
    rlp_node.append(0x43);
    rlp_node.append(0x9e);
    rlp_node.append(0x45);
    rlp_node.append(0x8f);
    rlp_node.append(0x98);
    rlp_node.append(0x24);
    rlp_node.append(0x2e);
    rlp_node.append(0xd0);
    rlp_node.append(0x37);
    rlp_node.append(0x48);
    rlp_node.append(0xea);
    rlp_node.append(0x8f);
    rlp_node.append(0xe2);
    rlp_node.append(0xb3);
    rlp_node.append(0x5f);
    rlp_node.append(0x80);

    let mut expected = ArrayTrait::new();
    expected.append(0x7770cf09b5067a1b35df62a924898175ceaeecad1f68cdb4a844400c73c14af4);
    expected.append(0x1ea385d05ab261466d5c0487fe684534c19f1a4b5c4b18dc1a363560025071b4);
    expected.append(0x2c4c04ce3540d3d1461872303c53a5e56683c1304f8d36a8800c6af5fa3fcdee);
    expected.append(0xa9dc778dc54b7dd3c48222e739d161feb0c0eeceb2dcd51737f05b8e37a63851);
    expected.append(0xa95f4d5556df62ddc262990497ae569bcd8efdda7b200793f8d3de4cdb9718d7);
    expected.append(0x39d4066d1438226eaf4ac9e943a874a9a9c25fb0d81db9861d8c1336b3e2034c);
    expected.append(0x7acc7c63b46aa418b3c9a041a1256bcb7361316b397ada5a8867491bbb130130);
    expected.append(0x15358a81252ec4937113fe36c78046b711fba1973491bb29187a00785ff852ae);
    expected.append(0x689142d316abfaa71c8bcedf49201ddbb2104e250adc90c4e856221f534a9658);
    expected.append(0xdc3650992534fda8a314a7dbb0ae3ba8c79db5550c69ce2a2460c007adc4c1a3);
    expected.append(0x20b0683b6655b0059ee103d04e4b506bcbc139006392b7dab11178c2660342e7);
    expected.append(0x8eedeb45fb630f1cd99736eb18572217cbc6d5f315b71be203b03ce8d99b2614);
    expected.append(0x7923a33df65a986fd5e7f9e6e4c2b969736b08944ebe99394a8614612fe609f3);
    expected.append(0x6534d7d01a20714aa4fb2a55b946ce64c3222dffad2aa2d18a923473c92ab1fd);
    expected.append(0xbff9c28bfeb8bf2da9b618c8c3b06fe80cb1c0bd144738f7c42161ff29e2502f);
    expected.append(0x7f1461693c704ea5021bbba35e72c502f6439e458f98242ed03748ea8fe2b35f);

    let decoded = MPTTrait::decode_rlp_node(rlp_node.span()).unwrap();
    let expected_value = ArrayTrait::new();
    let expected_node = MPTNode::Branch((expected.span(), expected_value.span()));
    assert(decoded == expected_node, 'Branch node differs');
}

#[test]
#[available_gas(9999999999)]
fn test_decode_rlp_node_leaf_odd() {
    let mut rlp_node  = ArrayTrait::new();
    rlp_node.append(0xf8);
    rlp_node.append(0x66);
    rlp_node.append(0x9d);
    rlp_node.append(0x33);
    rlp_node.append(0x8c);
    rlp_node.append(0xfc);
    rlp_node.append(0x99);
    rlp_node.append(0x7a);
    rlp_node.append(0x82);
    rlp_node.append(0x25);
    rlp_node.append(0x21);
    rlp_node.append(0x67);
    rlp_node.append(0xac);
    rlp_node.append(0x25);
    rlp_node.append(0xa1);
    rlp_node.append(0x65);
    rlp_node.append(0x80);
    rlp_node.append(0xd9);
    rlp_node.append(0x73);
    rlp_node.append(0x03);
    rlp_node.append(0x53);
    rlp_node.append(0xeb);
    rlp_node.append(0x1b);
    rlp_node.append(0x9f);
    rlp_node.append(0x0c);
    rlp_node.append(0x6b);
    rlp_node.append(0xbf);
    rlp_node.append(0x0e);
    rlp_node.append(0x4c);
    rlp_node.append(0x82);
    rlp_node.append(0xc4);
    rlp_node.append(0xd0);
    rlp_node.append(0xb8);
    rlp_node.append(0x46);
    rlp_node.append(0xf8);
    rlp_node.append(0x44);
    rlp_node.append(0x01);
    rlp_node.append(0x80);
    rlp_node.append(0xa0);
    rlp_node.append(0x96);
    rlp_node.append(0xc4);
    rlp_node.append(0xbd);
    rlp_node.append(0xfb);
    rlp_node.append(0x8f);
    rlp_node.append(0x2a);
    rlp_node.append(0xd0);
    rlp_node.append(0x89);
    rlp_node.append(0x20);
    rlp_node.append(0x0b);
    rlp_node.append(0xad);
    rlp_node.append(0x93);
    rlp_node.append(0xf6);
    rlp_node.append(0x21);
    rlp_node.append(0x6f);
    rlp_node.append(0xe9);
    rlp_node.append(0x66);
    rlp_node.append(0x52);
    rlp_node.append(0xf9);
    rlp_node.append(0xe2);
    rlp_node.append(0x76);
    rlp_node.append(0x1b);
    rlp_node.append(0x55);
    rlp_node.append(0xbf);
    rlp_node.append(0xd8);
    rlp_node.append(0xa7);
    rlp_node.append(0x15);
    rlp_node.append(0xad);
    rlp_node.append(0x3d);
    rlp_node.append(0x6e);
    rlp_node.append(0xca);
    rlp_node.append(0xf6);
    rlp_node.append(0xa0);
    rlp_node.append(0x4e);
    rlp_node.append(0x36);
    rlp_node.append(0xf9);
    rlp_node.append(0x6e);
    rlp_node.append(0xe1);
    rlp_node.append(0x66);
    rlp_node.append(0x7a);
    rlp_node.append(0x66);
    rlp_node.append(0x3d);
    rlp_node.append(0xfa);
    rlp_node.append(0xac);
    rlp_node.append(0x57);
    rlp_node.append(0xc4);
    rlp_node.append(0xd1);
    rlp_node.append(0x85);
    rlp_node.append(0xa0);
    rlp_node.append(0xe3);
    rlp_node.append(0x69);
    rlp_node.append(0xa3);
    rlp_node.append(0xa2);
    rlp_node.append(0x17);
    rlp_node.append(0xe0);
    rlp_node.append(0x07);
    rlp_node.append(0x9d);
    rlp_node.append(0x49);
    rlp_node.append(0x62);
    rlp_node.append(0x0f);
    rlp_node.append(0x34);
    rlp_node.append(0xf8);
    rlp_node.append(0x5d);
    rlp_node.append(0x1a);
    rlp_node.append(0xc7);

    let mut expected_key_end = ArrayTrait::new();
    expected_key_end.append(0x3);
    expected_key_end.append(0x8);
    expected_key_end.append(0xc);
    expected_key_end.append(0xf);
    expected_key_end.append(0xc);
    expected_key_end.append(0x9);
    expected_key_end.append(0x9);
    expected_key_end.append(0x7);
    expected_key_end.append(0xa);
    expected_key_end.append(0x8);
    expected_key_end.append(0x2);
    expected_key_end.append(0x2);
    expected_key_end.append(0x5);
    expected_key_end.append(0x2);
    expected_key_end.append(0x1);
    expected_key_end.append(0x6);
    expected_key_end.append(0x7);
    expected_key_end.append(0xa);
    expected_key_end.append(0xc);
    expected_key_end.append(0x2);
    expected_key_end.append(0x5);
    expected_key_end.append(0xa);
    expected_key_end.append(0x1);
    expected_key_end.append(0x6);
    expected_key_end.append(0x5);
    expected_key_end.append(0x8);
    expected_key_end.append(0x0);
    expected_key_end.append(0xd);
    expected_key_end.append(0x9);
    expected_key_end.append(0x7);
    expected_key_end.append(0x3);
    expected_key_end.append(0x0);
    expected_key_end.append(0x3);
    expected_key_end.append(0x5);
    expected_key_end.append(0x3);
    expected_key_end.append(0xe);
    expected_key_end.append(0xb);
    expected_key_end.append(0x1);
    expected_key_end.append(0xb);
    expected_key_end.append(0x9);
    expected_key_end.append(0xf);
    expected_key_end.append(0x0);
    expected_key_end.append(0xc);
    expected_key_end.append(0x6);
    expected_key_end.append(0xb);
    expected_key_end.append(0xb);
    expected_key_end.append(0xf);
    expected_key_end.append(0x0);
    expected_key_end.append(0xe);
    expected_key_end.append(0x4);
    expected_key_end.append(0xc);
    expected_key_end.append(0x8);
    expected_key_end.append(0x2);
    expected_key_end.append(0xc);
    expected_key_end.append(0x4);
    expected_key_end.append(0xd);
    expected_key_end.append(0x0);

    let mut expected_value = ArrayTrait::new();
    expected_value.append(0xf8);
    expected_value.append(0x44);
    expected_value.append(0x01);
    expected_value.append(0x80);
    expected_value.append(0xa0);
    expected_value.append(0x96);
    expected_value.append(0xc4);
    expected_value.append(0xbd);
    expected_value.append(0xfb);
    expected_value.append(0x8f);
    expected_value.append(0x2a);
    expected_value.append(0xd0);
    expected_value.append(0x89);
    expected_value.append(0x20);
    expected_value.append(0x0b);
    expected_value.append(0xad);
    expected_value.append(0x93);
    expected_value.append(0xf6);
    expected_value.append(0x21);
    expected_value.append(0x6f);
    expected_value.append(0xe9);
    expected_value.append(0x66);
    expected_value.append(0x52);
    expected_value.append(0xf9);
    expected_value.append(0xe2);
    expected_value.append(0x76);
    expected_value.append(0x1b);
    expected_value.append(0x55);
    expected_value.append(0xbf);
    expected_value.append(0xd8);
    expected_value.append(0xa7);
    expected_value.append(0x15);
    expected_value.append(0xad);
    expected_value.append(0x3d);
    expected_value.append(0x6e);
    expected_value.append(0xca);
    expected_value.append(0xf6);
    expected_value.append(0xa0);
    expected_value.append(0x4e);
    expected_value.append(0x36);
    expected_value.append(0xf9);
    expected_value.append(0x6e);
    expected_value.append(0xe1);
    expected_value.append(0x66);
    expected_value.append(0x7a);
    expected_value.append(0x66);
    expected_value.append(0x3d);
    expected_value.append(0xfa);
    expected_value.append(0xac);
    expected_value.append(0x57);
    expected_value.append(0xc4);
    expected_value.append(0xd1);
    expected_value.append(0x85);
    expected_value.append(0xa0);
    expected_value.append(0xe3);
    expected_value.append(0x69);
    expected_value.append(0xa3);
    expected_value.append(0xa2);
    expected_value.append(0x17);
    expected_value.append(0xe0);
    expected_value.append(0x07);
    expected_value.append(0x9d);
    expected_value.append(0x49);
    expected_value.append(0x62);
    expected_value.append(0x0f);
    expected_value.append(0x34);
    expected_value.append(0xf8);
    expected_value.append(0x5d);
    expected_value.append(0x1a);
    expected_value.append(0xc7);

    let decoded = MPTTrait::decode_rlp_node(rlp_node.span()).unwrap();
    let expected_node = MPTNode::Leaf((expected_key_end.span(), expected_value.span()));
    assert(decoded == expected_node, 'Odd leaf node differs');
}

#[test]
#[available_gas(9999999999)]
fn test_decode_rlp_node_leaf_even() {
    let mut rlp_node  = ArrayTrait::new();
    rlp_node.append(0xf8);
    rlp_node.append(0x66);
    rlp_node.append(0x9d);
    rlp_node.append(0x23);
    rlp_node.append(0x8c);
    rlp_node.append(0xfc);
    rlp_node.append(0x99);
    rlp_node.append(0x7a);
    rlp_node.append(0x82);
    rlp_node.append(0x25);
    rlp_node.append(0x21);
    rlp_node.append(0x67);
    rlp_node.append(0xac);
    rlp_node.append(0x25);
    rlp_node.append(0xa1);
    rlp_node.append(0x65);
    rlp_node.append(0x80);
    rlp_node.append(0xd9);
    rlp_node.append(0x73);
    rlp_node.append(0x03);
    rlp_node.append(0x53);
    rlp_node.append(0xeb);
    rlp_node.append(0x1b);
    rlp_node.append(0x9f);
    rlp_node.append(0x0c);
    rlp_node.append(0x6b);
    rlp_node.append(0xbf);
    rlp_node.append(0x0e);
    rlp_node.append(0x4c);
    rlp_node.append(0x82);
    rlp_node.append(0xc4);
    rlp_node.append(0xd0);
    rlp_node.append(0xb8);
    rlp_node.append(0x46);
    rlp_node.append(0xf8);
    rlp_node.append(0x44);
    rlp_node.append(0x01);
    rlp_node.append(0x80);
    rlp_node.append(0xa0);
    rlp_node.append(0x96);
    rlp_node.append(0xc4);
    rlp_node.append(0xbd);
    rlp_node.append(0xfb);
    rlp_node.append(0x8f);
    rlp_node.append(0x2a);
    rlp_node.append(0xd0);
    rlp_node.append(0x89);
    rlp_node.append(0x20);
    rlp_node.append(0x0b);
    rlp_node.append(0xad);
    rlp_node.append(0x93);
    rlp_node.append(0xf6);
    rlp_node.append(0x21);
    rlp_node.append(0x6f);
    rlp_node.append(0xe9);
    rlp_node.append(0x66);
    rlp_node.append(0x52);
    rlp_node.append(0xf9);
    rlp_node.append(0xe2);
    rlp_node.append(0x76);
    rlp_node.append(0x1b);
    rlp_node.append(0x55);
    rlp_node.append(0xbf);
    rlp_node.append(0xd8);
    rlp_node.append(0xa7);
    rlp_node.append(0x15);
    rlp_node.append(0xad);
    rlp_node.append(0x3d);
    rlp_node.append(0x6e);
    rlp_node.append(0xca);
    rlp_node.append(0xf6);
    rlp_node.append(0xa0);
    rlp_node.append(0x4e);
    rlp_node.append(0x36);
    rlp_node.append(0xf9);
    rlp_node.append(0x6e);
    rlp_node.append(0xe1);
    rlp_node.append(0x66);
    rlp_node.append(0x7a);
    rlp_node.append(0x66);
    rlp_node.append(0x3d);
    rlp_node.append(0xfa);
    rlp_node.append(0xac);
    rlp_node.append(0x57);
    rlp_node.append(0xc4);
    rlp_node.append(0xd1);
    rlp_node.append(0x85);
    rlp_node.append(0xa0);
    rlp_node.append(0xe3);
    rlp_node.append(0x69);
    rlp_node.append(0xa3);
    rlp_node.append(0xa2);
    rlp_node.append(0x17);
    rlp_node.append(0xe0);
    rlp_node.append(0x07);
    rlp_node.append(0x9d);
    rlp_node.append(0x49);
    rlp_node.append(0x62);
    rlp_node.append(0x0f);
    rlp_node.append(0x34);
    rlp_node.append(0xf8);
    rlp_node.append(0x5d);
    rlp_node.append(0x1a);
    rlp_node.append(0xc7);

    let mut expected_key_end = ArrayTrait::new();
    expected_key_end.append(0x8);
    expected_key_end.append(0xc);
    expected_key_end.append(0xf);
    expected_key_end.append(0xc);
    expected_key_end.append(0x9);
    expected_key_end.append(0x9);
    expected_key_end.append(0x7);
    expected_key_end.append(0xa);
    expected_key_end.append(0x8);
    expected_key_end.append(0x2);
    expected_key_end.append(0x2);
    expected_key_end.append(0x5);
    expected_key_end.append(0x2);
    expected_key_end.append(0x1);
    expected_key_end.append(0x6);
    expected_key_end.append(0x7);
    expected_key_end.append(0xa);
    expected_key_end.append(0xc);
    expected_key_end.append(0x2);
    expected_key_end.append(0x5);
    expected_key_end.append(0xa);
    expected_key_end.append(0x1);
    expected_key_end.append(0x6);
    expected_key_end.append(0x5);
    expected_key_end.append(0x8);
    expected_key_end.append(0x0);
    expected_key_end.append(0xd);
    expected_key_end.append(0x9);
    expected_key_end.append(0x7);
    expected_key_end.append(0x3);
    expected_key_end.append(0x0);
    expected_key_end.append(0x3);
    expected_key_end.append(0x5);
    expected_key_end.append(0x3);
    expected_key_end.append(0xe);
    expected_key_end.append(0xb);
    expected_key_end.append(0x1);
    expected_key_end.append(0xb);
    expected_key_end.append(0x9);
    expected_key_end.append(0xf);
    expected_key_end.append(0x0);
    expected_key_end.append(0xc);
    expected_key_end.append(0x6);
    expected_key_end.append(0xb);
    expected_key_end.append(0xb);
    expected_key_end.append(0xf);
    expected_key_end.append(0x0);
    expected_key_end.append(0xe);
    expected_key_end.append(0x4);
    expected_key_end.append(0xc);
    expected_key_end.append(0x8);
    expected_key_end.append(0x2);
    expected_key_end.append(0xc);
    expected_key_end.append(0x4);
    expected_key_end.append(0xd);
    expected_key_end.append(0x0);

    let mut expected_value = ArrayTrait::new();
    expected_value.append(0xf8);
    expected_value.append(0x44);
    expected_value.append(0x01);
    expected_value.append(0x80);
    expected_value.append(0xa0);
    expected_value.append(0x96);
    expected_value.append(0xc4);
    expected_value.append(0xbd);
    expected_value.append(0xfb);
    expected_value.append(0x8f);
    expected_value.append(0x2a);
    expected_value.append(0xd0);
    expected_value.append(0x89);
    expected_value.append(0x20);
    expected_value.append(0x0b);
    expected_value.append(0xad);
    expected_value.append(0x93);
    expected_value.append(0xf6);
    expected_value.append(0x21);
    expected_value.append(0x6f);
    expected_value.append(0xe9);
    expected_value.append(0x66);
    expected_value.append(0x52);
    expected_value.append(0xf9);
    expected_value.append(0xe2);
    expected_value.append(0x76);
    expected_value.append(0x1b);
    expected_value.append(0x55);
    expected_value.append(0xbf);
    expected_value.append(0xd8);
    expected_value.append(0xa7);
    expected_value.append(0x15);
    expected_value.append(0xad);
    expected_value.append(0x3d);
    expected_value.append(0x6e);
    expected_value.append(0xca);
    expected_value.append(0xf6);
    expected_value.append(0xa0);
    expected_value.append(0x4e);
    expected_value.append(0x36);
    expected_value.append(0xf9);
    expected_value.append(0x6e);
    expected_value.append(0xe1);
    expected_value.append(0x66);
    expected_value.append(0x7a);
    expected_value.append(0x66);
    expected_value.append(0x3d);
    expected_value.append(0xfa);
    expected_value.append(0xac);
    expected_value.append(0x57);
    expected_value.append(0xc4);
    expected_value.append(0xd1);
    expected_value.append(0x85);
    expected_value.append(0xa0);
    expected_value.append(0xe3);
    expected_value.append(0x69);
    expected_value.append(0xa3);
    expected_value.append(0xa2);
    expected_value.append(0x17);
    expected_value.append(0xe0);
    expected_value.append(0x07);
    expected_value.append(0x9d);
    expected_value.append(0x49);
    expected_value.append(0x62);
    expected_value.append(0x0f);
    expected_value.append(0x34);
    expected_value.append(0xf8);
    expected_value.append(0x5d);
    expected_value.append(0x1a);
    expected_value.append(0xc7);

    let decoded = MPTTrait::decode_rlp_node(rlp_node.span()).unwrap();
    let expected_node = MPTNode::Leaf((expected_key_end.span(), expected_value.span()));
    assert(decoded == expected_node, 'Even leaf node differs');
}
